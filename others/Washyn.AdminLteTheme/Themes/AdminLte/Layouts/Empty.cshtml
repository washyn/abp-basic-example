@using System.Globalization
@using Volo.Abp.AspNetCore.Mvc.UI.Bundling.TagHelpers
@using Volo.Abp.AspNetCore.Mvc.UI.Components.LayoutHook
@using Volo.Abp.AspNetCore.Mvc.UI.Layout
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.Shared.Bundling
@using Volo.Abp.AspNetCore.Mvc.UI.Theming
@using Volo.Abp.AspNetCore.Mvc.UI.Widgets.Components.WidgetScripts
@using Volo.Abp.AspNetCore.Mvc.UI.Widgets.Components.WidgetStyles
@using Volo.Abp.Localization
@using Volo.Abp.Ui.Branding
@inject IBrandingProvider BrandingProvider
@inject IPageLayout PageLayout
@{
    Layout = null;
    var containerClass = ViewBag.FluidLayout == true ? "container-fluid" : "container"; //TODO: Better and type-safe options

    var pageTitle = ViewBag.Title == null ? BrandingProvider.AppName : ViewBag.Title; //TODO: Discard to get from Title

    if (PageLayout.Content.Title != null)
    {
        if (!string.IsNullOrWhiteSpace(pageTitle))
        {
            pageTitle = " | " + pageTitle;
        }

        pageTitle = PageLayout.Content.Title + pageTitle;
    }

    var rtl = CultureHelper.IsRtl ? "rtl" : string.Empty;
}

<!DOCTYPE html>
<html lang="@CultureInfo.CurrentCulture.Name" dir="@rtl">
<head>
    @await Component.InvokeLayoutHookAsync(LayoutHooks.Head.First, StandardLayouts.Empty)

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>@pageTitle</title>
    @if (ViewBag.Description != null)
    {
        <meta name="description" content="@ViewBag.Description" />
    }

    <!-- Google Font: Source Sans Pro -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
    
    <abp-style-bundle name="@StandardBundles.Styles.Global" />

    @await RenderSectionAsync("style_plugins", false)

    <!-- Theme style -->
    <link rel="stylesheet" href="~/dist/css/adminlte.css">

    @await Component.InvokeAsync(typeof(WidgetStylesViewComponent))

    @await RenderSectionAsync("styles", false)

    @await Component.InvokeLayoutHookAsync(LayoutHooks.Head.Last, StandardLayouts.Empty)

</head>
@* hold-transition sidebar-mini *@
<body class="">
@await Component.InvokeLayoutHookAsync(LayoutHooks.Body.First, StandardLayouts.Empty)
@* <div class="wrapper"> *@
@* </div> *@
@(await Component.InvokeAsync<Washyn.AdminLteTheme.Themes.AdminLte.Components.PageAlerts.PageAlertsViewComponent>())
@await Component.InvokeLayoutHookAsync(LayoutHooks.PageContent.First, StandardLayouts.Empty)
@RenderBody()
@await Component.InvokeLayoutHookAsync(LayoutHooks.PageContent.Last, StandardLayouts.Empty)


<!-- REQUIRED SCRIPTS -->
<!-- jQuery -->
@* <script src="~/plugins/jquery/jquery.min.js"></script> *@
<!-- Bootstrap 4 -->
@* <script src="~/plugins/bootstrap/js/bootstrap.bundle.min.js"></script> *@

<abp-script-bundle name="@StandardBundles.Scripts.Global"/>

@await RenderSectionAsync("script_plugins", false)

<!-- AdminLTE App -->
<script src="~/dist/js/adminlte.js"></script>

<!-- PAGE SCRIPTS  -->
<script src="~/Abp/ApplicationConfigurationScript"></script>
<script src="~/Abp/ServiceProxyScript"></script>

@await RenderSectionAsync("scripts", false)

@await Component.InvokeAsync(typeof(WidgetScriptsViewComponent))

@await Component.InvokeLayoutHookAsync(LayoutHooks.Body.Last, StandardLayouts.Empty)

</body>
</html>